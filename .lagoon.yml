docker-compose-yaml: docker-compose.yml

# Inject the deployed Git SHA.
environment_variables:
  git_sha: 'true'

# Uncomment to login into container registries if using private images.
# container-registries:
#  dockerhub:
#    # Environment variables DOCKER_USER and DOCKER_PASS needs to be set via Lagoon CLI.
#    username: DOCKER_USER
#    password: DOCKER_PASS

tasks:
  post-rollout:
    - run:
        name: Show DrevOps variables.
        command: |
          [ "${DREVOPS_DEBUG-}" = "1" ] && env -0  | sort -z | tr '\0' '\n' | grep ^DREVOPS_ || true
        service: cli
        shell: bash

    #;< !NOTIFICATIONS
    - run:
        name: Notify about pre-deployment.
        command: |
          if [ -n "$LAGOON_PR_NUMBER" ]; then export DREVOPS_NOTIFY_REF=$LAGOON_PR_NUMBER;export DREVOPS_NOTIFY_SHA=${LAGOON_PR_HEAD_SHA#origin/};export DREVOPS_NOTIFY_BRANCH=$LAGOON_PR_HEAD_BRANCH;else export DREVOPS_NOTIFY_REF=$LAGOON_GIT_BRANCH;export DREVOPS_NOTIFY_SHA=$LAGOON_GIT_SHA;export DREVOPS_NOTIFY_BRANCH=$LAGOON_GIT_BRANCH;fi
          DREVOPS_NOTIFY_PROJECT=$LAGOON_PROJECT \
          DREVOPS_NOTIFY_ENVIRONMENT_URL=$LAGOON_ROUTE \
          DREVOPS_NOTIFY_EVENT=pre_deployment ./scripts/drevops/notify.sh || true
        service: cli
        shell: bash
    #;> !NOTIFICATIONS

    - run:
        name: Backup DB before deployment in production
        command: |
          if [ "$LAGOON_ENVIRONMENT_TYPE" = "production" ] || [ "$LAGOON_GIT_BRANCH" = "${DREVOPS_LAGOON_PRODUCTION_BRANCH:-main}" ]; then
            echo "==> Running in PRODUCTION environment."
            DREVOPS_DB_DIR=/app/web/sites/default/files/private/pre_deployment_backups ./scripts/drevops/export-db-file.sh
          fi
        service: cli
    #;< !PROVISION_USE_PROFILE

    - run:
        name: Download database in non-production environments
        command: |
          if [ "$LAGOON_ENVIRONMENT_TYPE" != "production" ] && [ "$LAGOON_GIT_BRANCH" != "${DREVOPS_LAGOON_PRODUCTION_BRANCH:-main}" ]; then
            # No need to load SSH file to access production DB as Lagoon has SSH agent keys.
            export DREVOPS_DB_DOWNLOAD_SSH_FILE=false
            export DREVOPS_DB_DIR=/tmp/data
            rm -Rf $DREVOPS_DB_DIR || true
            ./scripts/drevops/download-db.sh
          fi
        service: cli
    #;> !PROVISION_USE_PROFILE

    - run:
        name: Provision site
        command: |
          #;< PROVISION_USE_PROFILE
          if [ "$DREVOPS_PROVISION_USE_PROFILE" = "1" ]; then
            # Explicitly set DB overwrite flag to the value from .env file for deployments from the profile.
            # @see https://github.com/uselagoon/lagoon/issues/1922
            export DREVOPS_PROVISION_OVERRIDE_DB="$(cat .env | grep ^DREVOPS_PROVISION_OVERRIDE_DB | cut -c31-)"
          fi
          #;> PROVISION_USE_PROFILE

          if [ "$LAGOON_ENVIRONMENT_TYPE" = "production" ] || [ "$LAGOON_GIT_BRANCH" = "${DREVOPS_LAGOON_PRODUCTION_BRANCH:-main}" ]; then
            echo "==> Running in PRODUCTION environment."
            #;< !PROVISION_USE_PROFILE
            # Never overwrite existing DB when production site already exists.
            export DREVOPS_PROVISION_OVERRIDE_DB=0
            #;> !PROVISION_USE_PROFILE
            # Never unblock admin user in production.
            export DRUPAL_UNBLOCK_ADMIN=0
            # Never sanitize DB in production.
            export DREVOPS_PROVISION_SANITIZE_DB_SKIP=1
          fi

          export DREVOPS_DB_DIR=/tmp/data
          ./scripts/drevops/provision.sh
        service: cli
        shell: bash

    #;< !NOTIFICATIONS
    - run:
        name: Send deployment notifications
        command: |
          if [ -n "$LAGOON_PR_NUMBER" ]; then export DREVOPS_NOTIFY_REF=$LAGOON_PR_NUMBER; export DREVOPS_NOTIFY_SHA=${LAGOON_PR_HEAD_SHA#origin/}; export DREVOPS_NOTIFY_BRANCH=$LAGOON_PR_HEAD_BRANCH; else export DREVOPS_NOTIFY_REF=$LAGOON_GIT_BRANCH; export DREVOPS_NOTIFY_SHA=$LAGOON_GIT_SHA; export DREVOPS_NOTIFY_BRANCH=$LAGOON_GIT_BRANCH; fi
          DREVOPS_NOTIFY_EVENT=post_deployment \
          DREVOPS_NOTIFY_PROJECT=$LAGOON_PROJECT \
          DREVOPS_NOTIFY_ENVIRONMENT_URL=$LAGOON_ROUTE \
          ./scripts/drevops/notify.sh
        service: cli
        shell: bash
    #;> !NOTIFICATIONS
environments:
  # Branch name that represents production environment.
  main:
    cronjobs:
      - name: drush cron
        schedule: '*/15 * * * *'
        command: drush cron --root=/app
        service: cli
    # Uncomment to enable installing a custom SSL certificate.
    # By default, Lagoon installs Let's Encrypt certificates for all environments.
    # routes:
    #   - nginx-php:
    #       - www.your-site-url.example:
    #           tls-acme: 'false'
    monitoring_urls:
      - www.your-site-url.example
  # Branch name that represents development environment.
  develop:
    cronjobs:
      - name: drush cron
        schedule: '*/15 * * * *'
        command: drush cron --root=/app
        service: cli
    # Uncomment to enable installing a custom SSL certificate.
    # By default, Lagoon installs Let's Encrypt certificates for all environments.
    # routes:
    #   - nginx-php:
    #       - dev.your-site-url.example:
    #           tls-acme: 'false'
    monitoring_urls:
      - dev.your-site-url.example

routes:
  insecure: Redirect
