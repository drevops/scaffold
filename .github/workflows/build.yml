name: Database, Build and Deploy

on:
  push:
    branches:
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - develop
  schedule:
    - cron: '0 18 * * *'

jobs:
  database:
    name: Database Job
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Create cache keys for database
        id: db_cache_keys
        run: |
          echo "db_cache_branch=$(echo develop)" >> $GITHUB_ENV
          echo "db_cache_fallback=yes" >> $GITHUB_ENV
          echo "db_cache_timestamp=$(date +%Y%m%d)" >> $GITHUB_ENV

      - name: Restore database cache
        uses: actions/cache@v3
        with:
          path: /root/project/.data
          key: ${{ runner.os }}-db-${{ steps.db_cache_keys.outputs.db_cache_branch }}-${{ steps.db_cache_keys.outputs.db_cache_fallback }}-${{ steps.db_cache_keys.outputs.db_cache_timestamp }}

      - name: Download and Export DB
        run: |
          ./scripts/vortex/download-db.sh
          docker compose up -d
          docker compose exec cli mkdir -p .data
          docker compose cp -L .data/db.sql cli:/app/.data/db.sql || true
          ./scripts/vortex/export-db.sh db.sql

      - name: Save database cache
        uses: actions/cache@v3
        with:
          path: /root/project/.data
          key: ${{ runner.os }}-db-${{ steps.db_cache_keys.outputs.db_cache_branch }}-${{ steps.db_cache_keys.outputs.db_cache_fallback }}-${{ steps.db_cache_keys.outputs.db_cache_timestamp }}

  build:
    name: Build Job
    runs-on: ubuntu-latest
    needs: database
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Lint Dockerfiles
        run: |
          for file in $(find .docker -name 'Dockerfile' -o -name '*.dockerfile'); do
            docker run --rm -i hadolint/hadolint < $file
          done

      - name: Build stack
        run: docker compose up -d

      - name: Test with PHPUnit
        run: |
          XDEBUG_ENABLE=true docker compose up -d cli php nginx
          docker compose exec -T -e XDEBUG_MODE=coverage cli vendor/bin/phpunit

  deploy:
    name: Deploy Job
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy application
        run: ./scripts/vortex/deploy.sh

  renovatebot:
    name: RenovateBot Job
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Renovate
        run: renovate
